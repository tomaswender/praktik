


#1. Создать список и заполнить его элементами различных типов данных. 
# Реализовать скрипт проверки типа данных каждого элемента. 
# Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

def print_type():
    a = ["a", 1, True, 1.5, None]
    for i in a:
        print(type(i))

# print_type()


#2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. 
# При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().


def obmen():
    a = ["a", 1, True, 1.5, None]
    a_len = 0
    if len(a)%2 == 0:
        a_len = len(a)
    else:
        a_len = a_len-1      
    for i in range(0, a_len-1):
        a[i], a[i+1] = a[i+1], a[i]
    print(a)

# obmen()


#3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень). 
# Напишите решения через list и через dict.

def def_dict():
    my_dict = {
        1: "Зима",
        2: "Зима",
        3: "Весна",
        4: "Весна",
        5: "Весна",
        6: "Лето",
        7: "Лето",
        8: "Лето",
        9: "Осень",
        10: "Осень",
        11: "Осень",
        12: "Зима"
    }
    answer = int(input('Введите число месяца: '))
    print(my_dict[answer])

# def_dict()

def def_list():
    my_list = ["Зима", "Зима", "Весна", "Весна", "Весна", "Лето", "Лето", "Лето", "Осень", "Осень", "Осень", "Зима"]
    answer = int(input('Введите число месяца: '))
    print(my_list[answer-1])

# def_list()


#4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. 
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

def my_split():
    answer = input('Введите что нибуть: ')
    my_split = answer.split(' ')
    for i in range(0, len(my_split)):
        print(f'{i+1}) {my_split[i][:10]}')

# my_split()


#5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. 
# У пользователя необходимо запрашивать новый элемент рейтинга. 
# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
#Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
#Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
#Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
#Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
#Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

def my_sort():
    my_list = [7, 5, 3, 3, 2]
    answer = int(input('Введите число: '))
    my_list.append(answer)
    print(sorted(my_list, reverse=True))

# my_sort()    

#6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре. 
# В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения). 
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.

def product():
    answer_number = int(input('Введите номер товара: '))
    answer_name = input('Введите название: ')
    answer_price = input('Введите цену: ')
    answer_count = input('Введите колличество: ')
    answer_shar = input('Введите характеристики: ')
    answer_unit = input('Введите единицу измерения: ')
    my_set = (answer_number, {
        'name' : answer_name,
        'price' : answer_price,
        'count' : answer_count,
        'shar' : answer_shar,
        'unit' : answer_unit
    })
    my_list = []
    my_list.append(my_set)
    print(my_list)

# product()
