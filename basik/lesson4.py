import random as r
import math as m
import collections as c
import functools as f
import itertools as it
from sys import argv




#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. 
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. 
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.


#script_name, first_param, second_param, third_param = argv
# print('Ваша ЗП:', (int(first_param)*int(second_param))+int(third_param))




#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
#Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
#Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#Результат: [12, 44, 4, 10, 78, 123].

def gen_list(max, depth, start=0):
    gen_list = [r.randint(start, max) for i in range(0, depth)]
    return gen_list


def sravnenie(limit, depth):
    my_list = gen_list(limit, depth)
    new_list = []
    for i in range(0, len(my_list)-1):
        if my_list[i+1] > my_list[i]:
            new_list.append(my_list[i+1])
        i =+ 1
    a = [my_list[i+1] for i in range(0, len(my_list)-1) if my_list[i+1] > my_list[i]]
    print(a)
    print(my_list)
    print(new_list)

# sravnenie(100, 10)




#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
#Подсказка: использовать функцию range() и генератор.

# print([i for i in range(20, 240) if i%20 & 21 == 0])



#4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
# Сформировать итоговый массив чисел, соответствующих требованию. 
# Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#Результат: [23, 1, 3, 10, 4, 11]

def unic():
    my_list = gen_list(100, 10)
    count = c.Counter()
    new_list = []
    for lists in my_list:
        count[lists] +=1
    for k, v in count.items():
        if v == 1:
            new_list.append(k)
    print(my_list)
    print(count)
    print(new_list)

# unic()

#5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
# В список должны войти четные числа от 100 до 1000 (включая границы). 
# Необходимо получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().


def func_sum():
    my_list = [i for i in range(100, 1001) if i%2 == 0]
    print(f.reduce(lambda x, y: x+y, my_list))

# func_sum()    



#6. Реализовать два небольших скрипта:
#а) итератор, генерирующий целые числа, начиная с указанного,
#б) итератор, повторяющий элементы некоторого списка, определенного заранее.
#Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
# Необходимо предусмотреть условие его завершения.
#Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

def func_list(start, stop):
    my_list = []
    for i in it.count(start):
        if i%2 == 0:
            my_list.append(i)
        if len(my_list) >= stop:
            break
    return my_list  

def shadow(lists, counts):
    new_list = lists
    for i in it.cycle(new_list):
        new_list.append(i)
        if len(new_list) >= counts:
            break
    print(new_list)

lists = func_list(1, 10)
shadow(lists, 20)







#7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). 
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    for i in range(1, n+1):
        yield m.factorial(i)

#for el in fact(5):
#   print(el)









