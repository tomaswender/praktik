



#1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который должен принимать данные (список списков) для формирования матрицы.
#Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
#Примеры матриц вы найдете в методичке.
#Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
#Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
#Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, a):
        self.a = a
    def __str__(self):
        return '\n'.join(['\t'.join(['%d' % i for i in row]) for row in self.a])
    def __add__(self, other):
        arr1 = []
        #if len(self.a) == len(other):
        for i in range(0, len(self.a)):
            arr2 = []
            for j in range(0, len(self.a[i])):
                arr2.append(self.a[i][j]+other.a[i][j])
            arr1.append(arr2)
        return arr1    


x = [[12,7,3], [4 ,5,6], [7 ,8,9]]
y = [[5,8,1], [6,7,3], [4,5,9]]  


# matrix1 = Matrix(x)
# matrix12 = Matrix(y)
# sum_m = matrix1+matrix12
# print(Matrix(sum_m))





#2. Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная сущность (класс) этого проекта — одежда, 
# которая может иметь определенное название. 
# К типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). 
# Это могут быть обычные числа: V и H, соответственно.
#Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3). 
# Проверить работу этих методов на реальных данных.
#Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта, 
# проверить на практике работу декоратора @property.

class Clothes:
    def __init__(self, v=0, h=0):
        self.v = v
        self.h = h
class Suit(Clothes):
    def cost(self):
        outlay = self.v/6.5 + 0.5
        return outlay
class Сoat(Clothes):
    def cost(self):
        outlay = 2 * self.h + 0.3
        return outlay

# c = Сoat(h=5)
# s = Suit(v=5)
# print(c.cost()+s.cost())





#3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. 
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число). 
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), 
# умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, 
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.
#Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
#Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
#Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
#Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
#Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. 
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
#Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, a):
        self.a = a
    def __add__(self, other):
        result = self.a + other.a
        return result
    def __sub__(self, other):
        if (self.a-other.a)>0:
            result = self.a - other.a
            return result
        else:
            print('Такая операция невозможна')
            return 0
    def __mul__(self, other):
        result = self.a * other.a
        return result
    def __truediv__(self, other):
        result = self.a / other.a
        return round(result)
    def make_order(self, c, b):
        arr = []
        for i in range(0, (round(c/b))):
            arr.append("*"*int(b))
        arr.append("*"*int(c%b))
        return '\n'.join(arr)


# c1 = Cell(7)
# c2 = Cell(8)
# c3 = Cell(5)

# s = c1*c2
# print(Cell(s).make_order(s, 6))

